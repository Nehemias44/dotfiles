#+TITLE: Emacs Config File
#+AUTHOR: Leanhdro
#+STARTUP: overview
* Core
** Sever
#+BEGIN_SRC emacs-lisp

  (require 'server)
  (unless (server-running-p)
    (server-start))
  
#+END_SRC
** Package management
#+BEGIN_SRC emacs-lisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

#+END_SRC
** Packages installation
#+BEGIN_SRC emacs-lisp

  (setq package-list
  	'(rainbow-mode
  	  rainbow-delimiters
  	  lua-mode
  	  rust-mode
  	  yaml-mode
  	  haskell-mode
  	  org-bullets
  	  olivetti
  	  which-key
  	  multiple-cursors
  	  ibuffer
  	  iedit
  	  imenu-list
  	  projectile
  	  company
  	  company-box
  	  yasnippet
  	  yasnippet-snippets
  	  lsp-mode
  	  lsp-java
  	  lsp-jedi
  	  lsp-ui
  	  dap-mode
  	  vterm
  	  vterm-toggle
  	  vertico
  	  cape
  	  orderless
  	  consult
  	  consult-recoll
  	  marginalia
  	  mini-frame
  	  zencoding-mode
  	  nerd-icons
  	  nerd-icons-dired
  	  elegant-agenda-mode))

  (dolist (package package-list)
    (straight-use-package package))

#+END_SRC
** Installation from repo 
#+BEGIN_SRC emacs-lisp

  ;; NANO modeline
  (straight-use-package
   '(nano-modeline :type git :host github :repo "rougier/nano-modeline" :branch "no-prefix"))

  ;; NANO Vertico
  (straight-use-package
   '(nano-vertico :type git :host github :repo "rougier/nano-vertico"))

  ;; SVG Library
  (straight-use-package
   '(svg-lib :type git :host github :repo "rougier/svg-lib"))

  ;; SVG-TAG-MODE
  (straight-use-package
   '(svg-tag-mode :type git :host github :repo "rougier/svg-tag-mode"))

    (straight-use-package
     '(sideframe :type git :host github :repo "rougier/sideframe"))

#+END_SRC
** Encoding
#+BEGIN_SRC emacs-lisp

  (setenv "LANG" "en_US.UTF-8")
  (set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
  (prefer-coding-system       'utf-8)     ; Add utf-8 at the front for automatic detection.
  (set-terminal-coding-system 'utf-8)     ; Set coding system of terminal output
  (set-keyboard-coding-system 'utf-8)     ; Set coding system for keyboard input on TERMINAL
  (set-language-environment "English")    ; Set up multilingual environment

#+END_SRC
* Startup
#+BEGIN_SRC emacs-lisp

  (setq-default inhibit-startup-screen t      
  	      inhibit-startup-message t     
  	      inhibit-startup-echo-area-message t 
  	      initial-scratch-message "" 
  	      initial-buffer-choice t)

#+END_SRC
* Default options
#+BEGIN_SRC emacs-lisp

  (setq-default c-basic-offset 4)
  (electric-pair-mode t)
  (setq make-backup-files nil) ; stop creating ~ files
  (add-to-list 'load-path "~/.emacs.d/elisp")

  (setq scroll-step            1
        scroll-conservatively  10000)


  (require 'recentf)
  (setq recentf-max-menu-items 10
        recentf-max-saved-items 100)

  (let (message-log-max)
    (recentf-mode 1))

  (setq system-time-locale "C")


#+END_SRC
* Interface
** Delimiters
#+BEGIN_SRC emacs-lisp
  
  (require 'rainbow-delimiters)
  (add-hook 'org-mode-hook  #'rainbow-delimiters-mode)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

#+END_SRC
** Frame
#+BEGIN_SRC emacs-lisp

  (require 'frame)

  ;; Default frame settings
  (setq default-frame-alist '((min-height . 1)  '(height . 45)
                              (min-width  . 1)  '(width  . 81)
                              (vertical-scroll-bars . nil)
                              (internal-border-width . 24)
                              (left-fringe . 3)
                              (right-fringe . 3)
                              (tool-bar-lines . 0)
                              (menu-bar-lines . 0)))

  ;; Default frame settings
  (setq initial-frame-alist default-frame-alist)

  (setq x-underline-at-descent-line t)

  (defun my/frame-recenter (&optional frame)
    "Center FRAME on the screen.
    FRAME can be a frame name, a terminal name, or a frame.
    If FRAME is omitted or nil, use currently selected frame."
    (interactive)
    (unless (eq 'maximised (frame-parameter nil 'fullscreen))
      (let* ((frame (or (and (boundp 'frame)
    			   frame)
    		      (selected-frame)))
    	   (frame-w (frame-pixel-width frame))
    	   (frame-h (frame-pixel-height frame))
    	   ;; frame-monitor-workarea returns (x y width height) for the monitor
    	   (monitor-w (nth 2 (frame-monitor-workarea frame)))
    	   (monitor-h (nth 3 (frame-monitor-workarea frame)))
    	   (center (list (/ (- monitor-w frame-w) 2)
    			 (/ (- monitor-h frame-h) 2))))
        (apply 'set-frame-position (flatten-list (list frame center))))))

  (add-hook 'after-init-hook #'my/frame-recenter)
  (add-hook 'after-make-frame-functions #'my/frame-recenter)

#+END_SRC
** Window
*** Divider
#+BEGIN_SRC emacs-lisp

  (setq-default window-divider-default-right-width 24
  	      window-divider-default-places 'right-only		
  	      left-margin-width 0
  	      right-margin-width 0
  	      window-combination-resize nil) 

  (window-divider-mode 1)

#+END_SRC
*** Dedicated
#+BEGIN_SRC emacs-lisp


  ;; Make a window dedicated
  (defun my/toggle-window-dedicated ()
    "Toggle whether the current active window is dedicated or not"
    (interactive)
    (message
     (if (let (window (get-buffer-window (current-buffer)))
  	 (set-window-dedicated-p window (not (window-dedicated-p window))))
         "Window '%s' is dedicated"
       "Window '%s' is normal")
     (current-buffer))
    (force-window-update))

  (bind-key "C-c d" #'my/toggle-window-dedicated)


#+END_SRC
** Dialog
#+BEGIN_SRC emacs-lisp
  
  (setq-default show-help-function nil    ; No help text
		use-file-dialog nil       ; No file dialog
		use-dialog-box nil        ; No dialog box
		pop-up-windows nil)       ; No popup windows

  (tooltip-mode -1)                       ; No tooltips
  (scroll-bar-mode -1)                    ; No scroll bars
  (tool-bar-mode -1)                      ; No toolbar

#+END_SRC
** Text
#+BEGIN_SRC emacs-lisp

  (setq-default use-short-answers t                     ; Replace yes/no prompts with y/n
		confirm-nonexistent-file-or-buffer nil) ; Ok to visit non existent files

  (delete-selection-mode 1)

#+END_SRC
** Scroll
#+BEGIN_SRC emacs-lisp
  
(setq-default scroll-conservatively 101       ; Avoid recentering when scrolling far
              scroll-margin 2                 ; Add a margin when scrolling vertically
              recenter-positions '(5 bottom)) ; Set re-centering positions

#+END_SRC
** Clipboard
#+BEGIN_SRC emacs-lisp
  
(setq-default select-enable-clipboard t) ; Merge system's and Emacs' clipboard

#+END_SRC
** Fonts
:LOGBOOK:
- Note taken on [2024-04-02 mar 22:37] \\
  Testeando org-add-note
:END:
#+BEGIN_SRC emacs-lisp

  (set-face-attribute 'default nil
  		      :family "Roboto Mono"
  		      :weight 'light
  		      :height 140)

  (set-face-attribute 'bold nil
  		      :family "Roboto Mono"
  		      :weight 'regular)

  (set-face-attribute 'italic nil
  		      :family "Victor Mono"
  		      :height 140
  		      :weight 'semilight
  		      :slant 'italic)
  
  (set-fontset-font t 'unicode
  		    (font-spec :name "Inconsolata") nil)

  (set-fontset-font t '(#xe000 . #xffdd)
  		    (font-spec :name "RobotoMono Nerd Font"
  			       :size 16) nil)
#+END_SRC

** Typography
#+BEGIN_SRC emacs-lisp

  (setq-default fill-column 80
		sentence-end-double-space nil
		bidi-paragraph-direction 'left-to-right
		truncate-string-ellipsis "…")

  (setq x-underline-at-descent-line nil
	x-use-underline-position-properties t
	underline-minimum-offset 10)
#+END_SRC
** Cursor
#+BEGIN_SRC emacs-lisp

  (setq-default cursor-type '(bar . 2)
                cursor-in-non-selected-window nil
                cursor-intangible-mode t
                x-stretch-cursor nil)
  (blink-cursor-mode 1)

  ;; (set-face-attribute 'cursor nil
  ;;                     :foreground text)

  ;; (set-cursor-color text)
#+END_SRC

** Line numbers
#+BEGIN_SRC emacs-lisp

  (require 'display-line-numbers)
  (setq display-line-numbers-type 'relative)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

#+END_SRC
** Hightlight current line
#+BEGIN_SRC emacs-lisp

  (global-hl-line-mode 1)

#+END_SRC
** Modeline and headerline
#+BEGIN_SRC emacs-lisp

  (load-file "~/.emacs.d/elisp/my-header-line.el")

  (add-hook 'prog-mode-hook #'my/header-line-mode)
  (add-hook 'org-mode-hook #'my/header-line-mode)
  (add-hook 'conf-mode-hook #'my/header-line-mode)

#+END_SRC
** Minibuffer
*** Setup minibuffer
#+BEGIN_SRC emacs-lisp
  
(defun my/minibuffer-setup ()

  (set-window-margins nil 0 0)
  (set-fringe-style '(0 . 0))
  (cursor-intangible-mode t)
  (face-remap-add-relative 'default :inherit 'highlight))

(add-hook 'minibuffer-setup-hook #'my/minibuffer-setup)

#+END_SRC
*** Resize window (Vertico)
#+BEGIN_SRC emacs-lisp

  (defun my/vertico--resize-window (height)
    "Resize active minibuffer window to HEIGHT."
    ;;  (setq-local truncate-lines (< (point) (* 0.8 (vertico--window-width)))
    (setq-local truncate-lines t
                resize-mini-windows 'grow-only
                max-mini-window-height 1.0)
    (unless (frame-root-window-p (active-minibuffer-window))
      (unless vertico-resize
        (setq height (max height vertico-count)))
      (let* ((window-resize-pixelwise t)
             (dp (- (max (cdr (window-text-pixel-size))
                         (* (default-line-height) (1+ height)))
                    (window-pixel-height))))
        (when (or (and (> dp 0) (/= height 0))
                  (and (< dp 0) (eq vertico-resize t)))
          (window-resize nil dp nil nil 'pixelwise)))))

  (advice-add #'vertico--resize-window :override #'my/vertico--resize-window)

#+END_SRC
*** Miniframe
#+BEGIN_SRC emacs-lisp :tangle no

  (require 'mini-frame)

  (defcustom my/minibuffer-position 'bottom
    "Minibuffer position, one of 'top or 'bottom"
    :type '(choice (const :tag "Top"    top)
                   (const :tag "Bottom" bottom))
    :group 'nano-minibuffer)


  (defun my/minibuffer--frame-parameters ()
    "Compute minibuffer frame size and position."

    ;; Quite precise computation to align the minibuffer and the
    ;; modeline when they are both at top position
    (let* ((edges (window-pixel-edges)) ;; (left top right bottom)
           (body-edges (window-body-pixel-edges)) ;; (left top right bottom)
           (left (nth 0 edges)) ;; Take margins into account
           (top (nth 1 edges)) ;; Drop header line
           (right (nth 2 edges)) ;; Take margins into account
           (bottom (nth 3 body-edges)) ;; Drop header line
           (left (if (eq left-fringe-width 0)
                     left
                   (- left (frame-parameter nil 'left-fringe))))
           (right (nth 2 edges))
           (right (if (eq right-fringe-width 0)
                      right
                    (+ right (frame-parameter nil 'right-fringe))))
           (border 1)
           (width (- right left (* 1 border)))

           ;; Window divider mode
           (width (- width (if (and (bound-and-true-p window-divider-mode)
                                    (or (eq window-divider-default-places 'right-only)
                                        (eq window-divider-default-places t))
                                    (window-in-direction 'right (selected-window)))
                               window-divider-default-right-width
                             0)))
           (y (- top border)))

      (append `((left-fringe . 0)
                (right-fringe . 0)
                (user-position . t) 
                (foreground-color . ,(face-foreground 'highlight nil 'default))
                (background-color . ,(face-background 'highlight nil 'default)))
              (cond ((and (eq my/minibuffer-position 'bottom))
                     `((top . -1)
                       (left . 0)
                       (width . 1.0)
                       (child-frame-border-width . 0)
                       (internal-border-width . 1)))
                    (t
                     `((left . ,(- left border))
                       (top . ,y)

                       (width . (text-pixels . ,width))
                       (child-frame-border-width . ,border)
                       (internal-border-width . 0)))))))

  ;(set-face-background 'child-frame-border (face-foreground 'nano-faded))
  (setq mini-frame-default-height 3)
  (setq mini-frame-create-lazy t)
  (setq mini-frame-show-parameters 'my/minibuffer--frame-parameters)
  (setq mini-frame-ignore-commands
        '("edebug-eval-expression" debugger-eval-expression))
  ;(setq mini-frame-internal-border-color (face-foreground 'nano-faded))

  (setq mini-frame-resize-min-height 3)
  (setq mini-frame-resize t)
  ;; (setq mini-frame-resize 'grow-only)
  ;; (setq mini-frame-default-height (+ 1 vertico-count))
  ;; (setq mini-frame-resize-height (+ 1 vertico-count))
  ;; (setq mini-frame-resize nil)

  ;;(mini-frame-mode 1)
#+END_SRC
** Sideframe
#+BEGIN_SRC emacs-lisp

  (defvar parameters
    '(window-parameters . ((no-other-window . nil)
                           (no-delete-other-windows . t))))

  (setq fit-window-to-buffer-horizontally t)
  (setq window-resize-pixelwise t)

  (defun dired-default-directory-on-left ()
    "Display `default-directory' in side window on left, hiding details."
    (interactive)
    (let ((buffer (dired-noselect default-directory)))
      (with-current-buffer buffer (dired-hide-details-mode t))
      (display-buffer-in-side-window
       buffer `((side . left) (slot . 0)
                (window-width . 32)
                (preserve-size . (t . nil)) ,parameters))))

  (global-set-key (kbd "M-d") 'dired-default-directory-on-left)

#+END_SRC
* Utilities
** Orderless
#+BEGIN_SRC emacs-lisp

  (require 'orderless)

  (setq completion-styles '(substring orderless basic)
        orderless-component-separator 'orderless-escapable-split-on-space
        read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t
        completion-ignore-case t)

#+END_SRC
** Consult
#+BEGIN_SRC emacs-lisp


  (require 'consult)

  (setq consult-preview-key nil) ; No live preview

  (bind-key "C-x C-r" #'consult-recent-file)
  (bind-key "C-x h"   #'consult-outline)
  (bind-key "C-x b"   #'consult-buffer)
  (bind-key "C-c h"   #'consult-history)
  ;; (bind-key "M-:"     #'consult-complex-command)


  (defun my/consult-line ()
    "Consult line with live preview"
    
    (interactive)
    (let ((consult-preview-key 'any)
          (mini-frame-resize 'grow-only)) ;; !! Important
      (consult-line)))

  (bind-key "C-s"   #'my/consult-line)


  (defun my/consult-goto-line ()
    "Consult goto line with live preview"
    
    (interactive)
    (let ((consult-preview-key 'any))
      (consult-goto-line)))

  (bind-key "M-g g"   #'my/consult-goto-line)
  (bind-key "M-g M-g" #'my/consult-goto-line)


#+END_SRC
** Vertico
#+BEGIN_SRC emacs-lisp

  (require 'vertico)

  ;; (setq completion-styles '(basic substring partial-completion flex))

  (setq vertico-resize nil        ; How to resize the Vertico minibuffer window.
        vertico-count 8           ; Maximal number of candidates to show.
        vertico-count-format nil) ; No prefix with number of entries

  (vertico-mode)

  (setq vertico-grid-separator
        #("  |  " 2 3 (display (space :width (1))
                               face (:background "#ECEFF1")))

        vertico-group-format
        (concat #(" " 0 1 (face vertico-group-title))
                #(" " 0 1 (face vertico-group-separator))
                #(" %s " 0 4 (face vertico-group-title))
                #(" " 0 1 (face vertico-group-separator
                                display (space :align-to (- right (-1 . right-margin) (- +1)))))))

  (set-face-attribute 'vertico-group-separator nil
                      :strike-through t)
  (set-face-attribute 'vertico-current nil
                      :inherit '(nano-strong nano-subtle))
  (set-face-attribute 'completions-first-difference nil
                      :inherit '(nano-default))

  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args)))


  (defun minibuffer-format-candidate (orig cand prefix suffix index _start)
    (let ((prefix (if (= vertico--index index)
                      "  "
                    "   "))) 
      (funcall orig cand prefix suffix index _start)))

  (advice-add #'vertico--format-candidate
              :around #'minibuffer-format-candidate)

  (defun vertico--prompt-selection ()
    "Highlight the prompt"

    (let ((inhibit-modification-hooks t))
      (set-text-properties (minibuffer-prompt-end) (point-max)
                           '(face (nano-strong nano-salient)))))


  (defun minibuffer-vertico-setup ()

    (setq truncate-lines t)
    (setq completion-in-region-function
          (if vertico-mode
              #'consult-completion-in-region
            #'completion--in-region)))

  (add-hook 'vertico-mode-hook #'minibuffer-vertico-setup)
  (add-hook 'minibuffer-setup-hook #'minibuffer-vertico-setup)

#+END_SRC
** Marginalia
#+BEGIN_SRC emacs-lisp


  (require 'marginalia)

  (setq-default marginalia--ellipsis "…"    ; Nicer ellipsis
                marginalia-align 'right     ; right alignment
                marginalia-align-offset -1) ; one space on the right

  (marginalia-mode)

#+END_SRC
** Icons
#+BEGIN_SRC emacs-lisp

  (require 'nerd-icons)
  
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp

  (require 'which-key)
  (which-key-mode t)

#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp

  (require 'multiple-cursors)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

#+END_SRC
** Ibuffer
#+BEGIN_SRC emacs-lisp

  (require 'ibuffer)
  (global-set-key (kbd "C-x C-b") 'ibuffer)

#+END_SRC
** Iedit
#+BEGIN_SRC emacs-lisp

  (require 'iedit)
  (global-set-key (kbd "C-:") 'iedit-mode)
  
#+END_SRC
** Imenu-list
#+BEGIN_SRC emacs-lisp

  (require 'imenu)
  (require 'imenu-list)
  (setq imenu-list-position 'left
        imenu-list-focus-after-activation t
        imenu-list-size 40
        imenu-mode-line-format nil)
  (global-set-key (kbd "M-'") #'imenu-list-smart-toggle)
  ;; (custom-theme-set-faces
  ;;  'user
  ;;  `(imenu-list-entry-face-0 ((t (:foreground ,text :family "Latin Modern Sans" :weight bold))))
  ;;  `(imenu-list-entry-face-1 ((t (:foreground ,love :family "Latin Modern Sans" :weight bold))))
  ;;  `(imenu-list-entry-face-2 ((t (:foreground ,pine :family "Latin Modern Sans" :weight bold))))
  ;;  `(imenu-list-entry-face-3 ((t (:foreground ,rose :family "Latin Modern Sans" :weight bold))))
  ;;  )

#+END_SRC
** Move lines
#+BEGIN_SRC emacs-lisp

  (defun move-line (n)
    "Move the current line up or down by N lines."
    (interactive "p")
    (setq col (current-column))
    (beginning-of-line) (setq start (point))
    (end-of-line) (forward-char) (setq end (point))
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      ;; restore point to original column in moved line
      (forward-line -1)
      (forward-char col)))

  (defun move-line-up (n)
    "Move the current line up by N lines."
    (interactive "p")
    (move-line (if (null n) -1 (- n))))

  (defun move-line-down (n)
    "Move the current line down by N lines."
    (interactive "p")
    (move-line (if (null n) 1 n)))

  (global-set-key (kbd "M-<up>") 'move-line-up)
  (global-set-key (kbd "M-<down>") 'move-line-down)
  
#+END_SRC
* Programming
** Autocomplete
*** Company
#+BEGIN_SRC emacs-lisp

  (require 'company)
  (require 'company-box)

  (setq-default company-minimum-prefix-length 3
		  company-idle-delay 0)
  (global-company-mode)
  (add-hook 'company-mode-hook 'company-box-mode)
  
#+END_SRC
*** Snippets
#+BEGIN_SRC emacs-lisp

  (require 'yasnippet)
  (require 'yasnippet-snippets)
  (setq yas-snippet-dirs
	'("~/.emacs.d/snippets"
	  "~/.emacs.d/straight/repos/yasnippet-snippets/snippets"))
  (yas-global-mode t)

#+END_SRC
*** Emmet
#+BEGIN_SRC emacs-lisp

  (require 'zencoding-mode)
  (add-hook 'sgml-mode-hook 'zencoding-mode)

#+END_SRC
** Projects
#+BEGIN_SRC emacs-lisp

  (require 'projectile)
  (projectile-mode t)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)


  (defun my-projectile-run-project (&optional prompt)
    (interactive "P")
    (let ((compilation-read-command
	   (or (not (projectile-run-command (projectile-compilation-dir)))
	       prompt)))
      (projectile-run-project prompt)))
  
#+END_SRC
** Languages
#+BEGIN_SRC emacs-lisp

  (require 'lua-mode)
  (require 'yaml-mode)
  (require 'haskell-mode)
  (require 'rust-mode)

  (add-hook 'rust-mode-hook '(setq indent-tabs-mode nil))
  (add-hook 'rust-mode-hook '(prettify-symbols-mode))

  (setq rust-format-on-save t)
  (define-key rust-mode-map (kbd "C-c C-c") 'rust-run)
  (define-key rust-mode-map (kbd "C-c C-t") 'rust-test)
  (define-key rust-mode-map (kbd "C-c C-o") 'rust-compile)
  (define-key rust-mode-map (kbd "C-c C-r") 'rust-run-clippy)

#+END_SRC
** LSP Emacs like VScode
#+BEGIN_SRC emacs-lisp

  (require 'lsp)
  (require 'lsp-java)
  (require 'lsp-jedi)
  (require 'dap-mode)
  (require 'dap-java)

  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  (setq lsp-enable-symbol-highlighting nil)
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-ui-sideline-enable nil)
  (setq lsp-eldoc-enable-hover nil)
  (setq lsp-ui-sideline-show-diagnostics nil)
  (setq lsp-rust-server 'rust-analyzer)

  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)
  (add-hook 'rust-mode-hook 'lsp)
  (add-hook 'pyhton-mode-hook 'lsp)
  (add-hook 'lua-mode-hook 'lsp)
  (add-hook 'java-mode-hook 'lsp)
  (add-hook 'javascript-mode-hook 'lsp)
  (add-hook 'lsp-mode-hook 'lsp-enable-which-key-integration)

  (with-eval-after-load 'js
    (define-key js-mode-map (kbd "M-.") nil))


#+END_SRC
* Org mode
** General
#+BEGIN_SRC emacs-lisp

  (add-hook 'org-mode-hook #'org-indent-mode)
  (add-hook 'org-mode-hook 'variable-pitch-mode)


  (with-eval-after-load 'org
    (add-hook 'org-mode-hook #'visual-line-mode))
  (add-hook 'org-mode-hook #'visual-line-mode)

  (setq org-image-actual-width nil)
  (setq-default org-support-shift-select t)
  (setq-default org-fontify-quote-and-verse-blocks t)

  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local electric-pair-inhibit-predicate
                          `(lambda (c)
                             (if (char-equal c ?<) t
    			     (,electric-pair-inhibit-predicate c))))))

#+END_SRC
** Bullets
#+BEGIN_SRC emacs-lisp

  (require 'org-bullets)
  (setq org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
  (add-hook 'org-mode-hook 'org-bullets-mode)

#+END_SRC
** Olivetti
#+BEGIN_SRC emacs-lisp

  (require 'olivetti)
  (olivetti-set-width 80)

#+END_SRC
** Functions
#+BEGIN_SRC emacs-lisp

  (defun mda/org-open-current-window ()                                              
    "Opens file in current window."                                                  
    (interactive)                                                                    
    (let ((org-link-frame-setup (cons (cons 'file 'find-file) org-link-frame-setup)))
      (org-open-at-point)))
  
  (define-key global-map (kbd "C-o") #'mda/org-open-current-window)

#+END_SRC
* Calendar
#+begin_src emacs-lisp

  (setq calendar-date-style 'iso)
  (setq calendar-week-start-day 1)

  ;; (setq calendar-day-header-array
  ;; 	["Do" "Lu" "Ma" "Mi" "Ju" "Vi" "Sá"])
  ;; (setq calendar-day-name-array
  ;; 	["domingo" "lunes" "martes" "miércoles"
  ;; 	 "jueves" "viernes" "sábado"])
  ;; (setq calendar-month-abbrev-array
  ;; 	["Ene" "Feb" "Mar" "Abr" "May" "Jun"
  ;; 	 "Jul" "Ago" "Sep" "Oct" "Nov" "Dic"])
  ;; (setq calendar-month-name-array
  ;; 	["enero"
  ;; 	 "febrero"
  ;; 	 "marzo"
  ;; 	 "abril"
  ;; 	 "mayo"
  ;; 	 "junio"
  ;; 	 "julio"
  ;; 	 "agosto"
  ;; 	 "septiembre"
  ;; 	 "octubre"
  ;; 	 "noviembre"
  ;; 	 "diciembre"])

  ;; (setq calendar-holidays
  ;; 	'((holiday-fixed 1 1   "Año Nuevo")
  ;; 	  (holiday-fixed 1 6   "Reyes Magos")
  ;; 	  (holiday-fixed 2 4   "Dia del Veterano")
  ;; 	  (holiday-fixed 4 18  "Jueves Santo")
  ;; 	  (holiday-fixed 4 19  "Viernes Santo")
  ;; 	  (holiday-fixed 5 1   "Dia del Trabajador")
  ;; 	  (holiday-fixed 5 25  "Revolucíon de Mayo")
  ;; 	  (holiday-fixed 6 20  "Dia de la Bandera")
  ;; 	  (holiday-fixed 12 08 "Inmaculada Concepcion")
  ;; 	  (holiday-fixed 12 25 "Navidad")
  ;; 	  ))

#+end_src
* Agenda
#+BEGIN_SRC emacs-lisp

   (add-to-list 'org-modules 'org-habit)
   (require 'org-habit)
   (require 'org-agenda)
                                        ;(require 'elegant-agenda-mode)

   (global-set-key (kbd "C-c a") 'org-agenda)

   ;; Files
   (setq org-agenda-files '("~/Documentos/Repos/agenda/Inbox.org"
                         "~/Documentos/Repos/agenda/Tasks.org"
                         "~/Documentos/Repos/agenda/Work.org"
                         "~/Documentos/Repos/agenda/Habits.org"
                         "~/Documentos/Repos/agenda/Notes.org"
                         "~/Documentos/Repos/agenda/Projects.org"))

   (setq org-archive-location
         "~/Documentos/Repos/agenda/Archivo/%s_store.org::datetree/")

   ;; Keywords
   (setq org-todo-keywords
         '((sequence "TODO(t!)"
                  "PROCESSING(p!)"	  
                  "LOCKED(l!)"   		  
                  "|" "CANCELLED(c!)" "DONE(d!)" "STORE(s!)")))
   ;; Faces
   (setq org-todo-keyword-faces
         (quote (("TODO"       :inherit org-todo)
                 ("DONE"       :inherit org-done)
                 ("PROCESSING" :inherit font-lock-keyword-face)
                 ("LOCKED"     :inherit font-lock-warning)
                 ("CANCELED"   :inherit font-lock-comment-face)
                 ("STORE"      :inherit font-lock-doc-face))))

   (setq org-agenda-inhibit-startup t
         org-agenda-include-diary nil
         org-agenda-show-log t
         org-agenda-show-all-dates t
         org-agenda-time-in-grid t
         org-agenda-show-current-time-in-grid t
         org-agenda-span 7
         org-agenda-start-on-weekday 1
         org-agenda-sticky nil
         org-agenda-window-setup 'current-window
         org-agenda-use-tag-inheritance t
         org-show-habits-only-for-today t
         org-deadline-warning-days 7
         org-log-done 'time
         org-log-into-drawer "LOGBOOK"
         org-tags-column 70
         org-refile-targets '((nil :maxlevel . 1)
                           (org-agenda-files :maxlevel . 1))
         org-refile-use-outline-path 'file
         org-agenda-block-separator #x2501
         org-habit-show-all-today t
         org-habit-show-habits nil
         org-extend-today-unitl 3)

   (defun air-org-skip-subtree-if-priority (priority)
     "Skip an agenda subtree if it has a priority of PRIORITY.

    PRIORITY may be one of the characters ?A, ?B, or ?C."
     (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
       (if (= pri-value pri-current)
        subtree-end
         nil)))

   (setq org-agenda-custom-commands
         '(
        ("d" "Agenda "
         ;; Display items with priority A
         (
          (tags "PRIORITY=\"A\""
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header
                  "High-priority unfinished tasks:")))

             ;; View curret day in the calendar view
             (agenda "" ((org-agenda-span 'day)
                      (org-agenda-overriding-header
                       "Today:")))

          ;; Display items with priority B
          ;; (really it is view all items minus A & C)
             (alltodo ""
                      ((org-agenda-skip-function
                     '(or (air-org-skip-subtree-if-priority ?A)
                             (air-org-skip-subtree-if-priority ?C)))
                       (org-agenda-overriding-header "Tasks:")))

             ;; Display items with pirority C
             (tags "PRIORITY=\"C\""
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header
                  "Low-priority Unfinished tasks:")))
             ))))

   (setq org-capture-templates
         `(
        ("t" "Task"
         entry (file+headline "~/Documentos/Org/Todo.org" "Tasks")
         "* TODO %?\n Captured: %<%Y-%m-%d %I:%M %p>"
         :empty-lines 1 )
        ("h" "Habit"
         entry (file+headline "~/Documentos/Org/Habits.org" "Tasks")
         "* TODO %?\n Captured: %<%Y-%m-%d %I:%M %p>"
         :empty-lines 1)
        ("i" "Meeting"
         entry (file "~/Documentos/Org/Agenda.org")
         "* Meeting with %? \n%T" :empty-lines 1)
        ("n" "Notes"
         entry (file+headline "~/Documentos/Org/Notes.org" "Notes")
         "* %?\n Captured: %<%Y-%m-%d %I:%M %p>"
         :empty-lines 1)
        )
         )

   (global-set-key (kbd "C-c c") #'org-capture)

  ;(add-hook 'org-agenda-mode-hook 'elegant-agenda-mode)
  (add-hook 'org-agenda-mode-hook 'my/nil-mode-line)
  (add-hook 'calendar-mode-hook   'my/nil-mode-line)

#+END_SRC
* SVG Tags
#+BEGIN_SRC emacs-lisp :tangle no

  (require 'svg-tag-mode)

  (plist-put svg-lib-style-default :font-family "Roboto Mono")
  (plist-put svg-lib-style-default :font-size 13)
  (set-face-attribute 'svg-tag-default-face nil
  		    :height 130)

  (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
  (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
  (defconst day-re "[A-Za-z]\\{3\\}")
  (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

  (defun svg-progress-percent (value)
    (save-match-data
      (svg-image (svg-lib-concat
  		(svg-lib-progress-bar  (/ (string-to-number value) 100.0)
                                         nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
  		(svg-lib-tag (concat value "%")
                               nil :stroke 0 :margin 0)) :ascent 'center)))

  (defun svg-progress-count (value)
    (save-match-data
      (let* ((seq (split-string value "/"))           
             (count (if (stringp (car seq))
                        (float (string-to-number (car seq)))
                      0))
             (total (if (stringp (cadr seq))
                        (float (string-to-number (cadr seq)))
                      1000)))
        (svg-image (svg-lib-concat
                    (svg-lib-progress-bar (/ count total) nil
                                          :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                    (svg-lib-tag value nil
                                 :stroke 0 :margin 0)) :ascent 'center))))

  (setq svg-tag-tags
        `(
          ;; Org tags :EMACS:
  	("\\(:[A-Z]+:\\)" . ((lambda (tag)
                               (svg-tag-make tag :beg 1 :end -1))))
  	
        ;; Task priority [#A] [#B] [#C]
        ("\\[#[A-Z]\\]" . ( (lambda (tag)
                              (svg-tag-make tag :face 'org-priority 
                                            :beg 2 :end -1 :margin 0))))

        ;; TODO / DONE
        ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0 :width 6))))
        ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0 :width 6))))


        ;; Citation of the form [cite:@Knuth:1984]
        ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
                                          (svg-tag-make tag
                                                        :inverse t
                                                        :beg 7 :end -1
                                                        :crop-right t))))
        ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
                                                   (svg-tag-make tag
  							       :end -1
  							       :crop-left t))))

        
        ;; Active date (with or without day name, with or without time)
        (,(format "\\(<%s>\\)" date-re) .
         ((lambda (tag)
            (svg-tag-make tag :beg 1 :end -1 :margin 0))))
        (,(format "\\(<%s \\)%s>" date-re day-time-re) .
         ((lambda (tag)
            (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
        (,(format "<%s \\(%s>\\)" date-re day-time-re) .
         ((lambda (tag)
            (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

        ;; Inactive date  (with or without day name, with or without time)
        (,(format "\\(\\[%s\\]\\)" date-re) .
         ((lambda (tag)
            (svg-tag-make tag :beg 1 :end -1 :margin 1 :face 'org-date))))
        (,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) .
         ((lambda (tag)
            (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
        (,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) .
         ((lambda (tag)
            (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date))))

        ;; ;; Progress
        ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                            (svg-progress-percent (substring tag 1 -2)))))
        ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                          (svg-progress-count (substring tag 1 -1)))))
        ))

  ;;(add-hook 'org-mode-hook #'svg-tag-mode)
  ;;(add-hook 'org-agenda-hook #'svg-tag-mode)

  (defun org-agenda-show-svg ()
    (let* ((case-fold-search nil)
           (keywords (mapcar #'svg-tag--build-keywords svg-tag--active-tags))
           (keyword (car keywords)))
      (while keyword
        (save-excursion
          (while (re-search-forward (nth 0 keyword) nil t)
            (overlay-put (make-overlay
                          (match-beginning 0) (match-end 0))
                         'display  (nth 3 (eval (nth 2 keyword)))) ))
        (pop keywords)
        (setq keyword (car keywords)))))
  ;;(add-hook 'org-agenda-finalize-hook #'org-agenda-show-svg)

#+END_SRC
* Terminal
#+BEGIN_SRC emacs-lisp

  (require 'vterm)
  (require 'vterm-toggle)

  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
  	       '((lambda (bufname _) (equal bufname vterm-buffer-name))
  		 (display-buffer-reuse-window display-buffer-in-direction)
  		 (direction . bottom)
  		 (dedicated . t)
  		 (reusable-frames . visible)
  		 (window-height . 0.3)))

  (global-set-key (kbd "C-x C-t") 'vterm-toggle)

#+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp

  (setq dired-free-space nil)
  (require 'nerd-icons)
  (require 'nerd-icons-dired)
  (add-hook 'dired-mode-hook #'nerd-icons-dired-mode)
  (add-hook 'dired-mode-hook #'my/nil-mode-line)

#+END_SRC
* Colors and faces
#+BEGIN_SRC emacs-lisp

  (load-file "~/.emacs.d/elisp/my-theme.el")
  (my/theme-mode 'light)

#+END_SRC
